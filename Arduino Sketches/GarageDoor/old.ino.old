/**
 * @file GarageDoor.ino
 * @author Jimmy Wang
 * @brief 
 * @version 0.1
 * @date 2022-08-05
 * 
 * @copyright Copyright (c) 2022
 * 
 */

#define SKETCH_NAME "Garage Door"
#define SKETCH_VERSION "0.1"

// Enable debug prints
#define MY_DEBUG

/**
 * Radio wiring ESP32(Node32s): RF24, RFM69, RFM95:
 *
 * | IO   | RF24 | RFM69 | RFM95 |
 * |------|------|-------|-------|
 * | MOSI | 23   | 23    | 23    |
 * | MISO | 19   | 19    | 19    |
 * | SCK  | 18   | 18    | 18    |
 * | CSN  | 5    | 5     | 5     |
 * | CE   | 17   | -     | -     |
 * | RST  | -    | GND   | GND   |
 * | IRQ  | 16*  | 16    | 16    |
 * * = optional 
*/

#define MY_RADIO_RFM69
#define MY_RFM69_FREQUENCY RFM69_433MHZ
#define MY_IS_RFM69HW
#define MY_RFM69_IRQ_PIN 16
#define MY_RFM69_IRQ_NUM MY_RFM69_IRQ_PIN
#define MY_RFM69_CS_PIN 5

#define CHILD_ID_G_DOOR_1 0
#define CHILD_ID_G_DOOR_1_STATE 1
#define CHILD_ID_G_DOOR_2 2
#define CHILD_ID_G_DOOR_2_STATE 3
// #define CHILD_ID_G_DOOR_3 2
// #define CHILD_ID_G_DOOR_4 3
#define CHILD_ID_G_HUM 4
#define CHILD_ID_G_TEMP 5

#define G_DOOR_1_PIN 25
#define G_DOOR_2_PIN 26
#define G_DOOR_3_PIN 32
#define G_DOOR_4_PIN 33

#define ATHXX_INTERVAL 10000 // Temperature and humidity reading interval

#include <unordered_map.h>
#include <MySensors.h>
#include <Wire.h>
#include "AHTxx.h"
#include "SimpleTimer.h"

// Initialize AHT10 sensor
AHTxx aht10(AHTXX_ADDRESS_X38, AHT1x_SENSOR);

MyMessage reportHum(CHILD_ID_G_HUM, V_HUM);
MyMessage reportTemp(CHILD_ID_G_TEMP, V_TEMP);

class GarageDoor {
  public:
    int id;
    int outputPin;

    GarageDoor(int id, int outputPin) {
      this->outputPin = outputPin;
      this->id = id;
      curState = 0;
      prevState = null;
      reportGarageDoorUp = new MyMessage(id, V_UP);
      reportGarageDoorDown = new MyMessage(id, V_DOWN);
      reportGarageDoorStop = new MyMessage(id, V_STOP);
      reportGarageDoorState = new MyMessage(id, V_TEXT);
    }

    // ----------- Main Methods -----------

    void close() {
      // if it's closed (0) or closing (2), do nothing
      // if it's open (1), press once to close
      // if it's opening (3), press twice to close
      // if it's pased (4) or has obstruction(5), press once to close
      switch(curState) {
        case 0:
          break;
        case 1:
          toggle();
          break;
        case 2:
          break;
        case 3:
          toggle(2);
          break;
        case 4 ... 5:
          toggle();
          break;
        default:
          break;
      }
      reportData();
    }

    void open() {
      switch(curState) {
        case 0:
          toggle();
          break;
        case 1:
          break;
        case 2:
          toggle();
          break;
        case 3:
          break;
        case 4:
          toggle(2);
        case 5:
          break;
        default:
          break;
      }
      reportData();
    }

    void stop() {
      switch(curState) {
        case 0:
          break;
        case 1:
          break;
        case 2:
          toggle(2);
          break;
        case 3:
          toggle();
          break;
        case 4 ... 5:
          break;
        default:
          break;
      }
      reportData();
    }

    void reportData() {
      send(reportGarageDoorUp->set(curState == 1 || curState == 3));
      send(reportGarageDoorDown->set(curState == 0 || curState == 2));
      send(reportGarageDoorStop->set(curState == 4 || curState == 5));
      send(reportGarageDoorState->set(getGarageDoorState()));
    }

    // ----------- Getter Methods -----------

    char *getGarageDoorState() {
      return garageDoorState[curState];
    }

    // ----------- Setter Methods -----------
  
  private:
    MyMessage *reportGarageDoorUp;
    MyMessage *reportGarageDoorDown;
    MyMessage *reportGarageDoorStop;
    MyMessage *reportGarageDoorState;
    int curState;
    int prevState;
    char *garageDoorState[6] = { 
      "关闭", 
      "打开", 
      "关闭中", 
      "打开中", 
      "静止", 
      "受阻"
    };

    void toggle(int it = 1) {
      for(; it > 0; --it) {
        int t = prevState;
        prevState = curState;
        if(prevState == 0) curState = 3;
        else if(prevState == 1) curState = 2;
        else if(prevState == 2) curState = 3;
        else if(prevState == 3) curState = 4;
        else if(prevState == 4 || prevState == 5) curState = 2;

        digitalWrite(outputPin, HIGH);
        delay(50);
        digitalWrite(outputPin, LOW);
        delay(400);
        digitalWrite(outputPin, HIGH);
      }
    }
};

MyMessage reportGarageDoor1Up(CHILD_ID_G_DOOR_1, V_UP);
MyMessage reportGarageDoor1Down(CHILD_ID_G_DOOR_1, V_DOWN);
MyMessage reportGarageDoor1Stop(CHILD_ID_G_DOOR_1, V_STOP);

MyMessage reportGarageDoor2Up(CHILD_ID_G_DOOR_2, V_UP);
MyMessage reportGarageDoor2Down(CHILD_ID_G_DOOR_2, V_DOWN);
MyMessage reportGarageDoor2Stop(CHILD_ID_G_DOOR_2, V_STOP);

MyMessage reportGarageDoorState1(CHILD_ID_G_DOOR_1_STATE, V_TEXT);
MyMessage reportGarageDoorState2(CHILD_ID_G_DOOR_2_STATE, V_TEXT);

void presentation() {
  sendSketchInfo(SKETCH_NAME, SKETCH_VERSION);

  present(CHILD_ID_G_HUM, S_HUM, "车库湿度");
  present(CHILD_ID_G_TEMP, S_TEMP, "车库温度");

  present(CHILD_ID_G_DOOR_1, S_COVER, "车库门1");
  present(CHILD_ID_G_DOOR_1_STATE, S_INFO, "车库门1 状态");

  present(CHILD_ID_G_DOOR_2, S_COVER, "车库门2");
  present(CHILD_ID_G_DOOR_1_STATE, S_INFO, "车库门2 状态");

  // present(CHILD_ID_G_DOOR_3, S_BINARY);
  // present(CHILD_ID_G_DOOR_4, S_BINARY);
}

void setup() {
  Wire.begin();

  I2C_Scanner();

  pinMode(G_DOOR_1_PIN, OUTPUT);
  pinMode(G_DOOR_2_PIN, OUTPUT);
  pinMode(G_DOOR_3_PIN, OUTPUT);
  pinMode(G_DOOR_4_PIN, OUTPUT);

  digitalWrite(G_DOOR_1_PIN, HIGH);
  digitalWrite(G_DOOR_2_PIN, HIGH);
  digitalWrite(G_DOOR_3_PIN, HIGH);
  digitalWrite(G_DOOR_4_PIN, HIGH);

  Serial.println(F("Beginning to initialize AHT10 sensor"));
  while(aht10.begin() != true) {
    Serial.println(F("AHT1x not connected or failed to load calibration coefficient"));

    delay(5000);
  }
  Serial.println(F("AHT10 OK"));

  send(reportGarageDoor1.set(door1state));
  send(reportGarageDoor2.set(door2state));

  delay(5000); // pause for 5 seconds
}

SimpleTimer AHTxx_Timer(ATHXX_INTERVAL);

void loop() {
  if(AHTxx_Timer.isReady()) {
    reportAHTxx();
    send(reportGarageDoor1.set(door1state));
    send(reportGarageDoor2.set(door2state));
    AHTxx_Timer.reset(); 
  }
}

void receive(const MyMessage &msg) {
  if(msg.sender == 0) {
    switch(msg.type) {
      case V_UP | V_DOWN | V_STOP:
        getGarageDoorsStatus();
      case V_UP:
        openGarageDoor(msg.sensor);
        break;
      case V_DOWN:
        closeGarageDoor(msg.sensor);
        break;
      case V_STOP:
        haltGarageDoor(msg.sensor);
        break;
    }
  }
}


